---
layout: post
title:  "Package of the Week: Django Widget Tweaks"
date:   2015-12-04 12:00:00
author: Vitor Freitas
tags: python django package
thumbnail: "/media/2015-12-04-package-of-the-week-django-widget-tweaks/featured-post-image.jpg"
featured_image: "/media/2015-12-04-package-of-the-week-django-widget-tweaks/featured-post-image.jpg"
featured_image_source: "https://pixabay.com/en/macbook-apple-imac-computer-screen-606763/"
---

When it comes to build forms, [Django Forms][django-forms]{:target="_blank"} can be really handy. If your application provide ways for the end-user to input data, it's strongly advised to do so through the built-in Django Forms. It will automate a good amount of work as well as providing a really stable and secure functionality.

In a nutshell, Django handles three distinct parts of the work involved in forms:

1. Preparing and restructuring data to make it ready for rendering;
2. Creating HTML forms for the data;
3. Receiving and processing submitted forms and data from the client.

The parts 1 and 3 are usually fine for the most cases. But when it comes to the actual HTML forms rendering, sometimes it lacks some options.

That's where the [Django Widget Tweaks][django-widget-tweaks]{:target="_blank"} takes place. I've been using it on my past projects, and I find it really useful. In this brief article, I will introduce you to the basics of this package, and show some of its use cases.

***

#### The problem

Before we start to talk about the Django Widget Tweaks package itself, I wanted to elaborate a little bit more about the problem I usually face that motivated me to look for this solution.

Most of my projects I use [Bootstrap][bootstrap]{:target="_blank"} as the base for my css. In some cases I even use it out of the box. If you are familiar with Bootstrap, you probably know it needs some css classes for the forms elements to look good.

A basic example of a form using the Bootstrap classes would be:

{% highlight html %}
<form>
  <div class="form-group">
    <label for="id_email">Email address</label>
    <input type="email" class="form-control" id="id_email" name="email">
  </div>
  <div class="form-group">
    <label for="id_password">Password</label>
    <input type="password" class="form-control" id="id_password" name="password">
  </div>
  <button type="submit" class="btn btn-default">Submit</button>
</form>
{% endhighlight %}

The problem usually lives in the need to add some extra attributes to the HTML element, preserving the old ones, that would automatically generated by Django, based on your models. In this case, it would be the div element with `form-group` class, as well as the `form-control` class in the input element.

For example, if we consider the following model:

{% highlight python %}
from django.db import models

class Person(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.EmailField(max_length=254)
    phone = models.CharField(max_length=20)
    bio = models.TextField(max_length=500)
{% endhighlight %}

And for this model, we create a Django Form:

{% highlight python %}
from django import forms
from simple_forms.apps.core.models import Person

class PersonForm(forms.ModelForm):
    class Meta:
        model = Person
        fields = ('first_name', 'last_name', 'email', 'phone', 'bio',)
{% endhighlight %}

If we render this form right away, using the following code:

{% highlight html %}
<form method="post">
  {% raw %}{% csrf_token %}{% endraw %}
  {% raw %}{{ form }}{% endraw %}
  <div class="form-group">
    <button type="submit" class="btn btn-success">
      <span class="glyphicon glyphicon-ok"></span> Save
    </button>
    <a href="{% raw %}{% url 'home' %}{% endraw %}" class="btn btn-default">Cancel</a>
  </div>
</form>
{% endhighlight %}

It would look broken, like the picture below:

![Bootstrap Form]({{ "/media/2015-12-04-package-of-the-week-django-widget-tweaks/broken-form.png" | prepend: site.baseurl }} "Bootstrap Form")

***

#### Installation

You can install it with `pip`, or download it from [PyPI][django-widget-tweaks]{:target="_blank"} if you prefer:

{% highlight bash %}
$ pip install django-widget-tweaks
{% endhighlight %}

Now add `widget_tweaks` to your `INSTALLED_APPS`:

{% highlight python %}
INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'widget_tweaks',

    'simple_forms.apps.core',
]
{% endhighlight %}


****

#### Usage

I will show just a few of the many options the package offers. You can learn more reading the official docs.

To start using it, you must load the template tag in the template you want to use its functions:

{% highlight html %}
{% raw %}{% load widget_tweaks %}{% endraw %}
{% endhighlight %}

Now expand your form by iterating through its fields, in order to expose the input tags, replacing this:

{% highlight html %}
{% raw %}{{ form }}{% endraw %}
{% endhighlight %}

For this:

{% highlight html %}
{% raw %}{% for hidden in form.hidden_fields %}{% endraw %}
  {% raw %}{{ hidden }}{% endraw %}
{% raw %}{% endfor %}{% endraw %}

{% raw %}{% for field in form.visible_fields %}{% endraw %}
  <div class="form-group">
    <label for="{% raw %}{{ field.id_for_label }}{% endraw %}">{% raw %}{{ field.label }}{% endraw %}</label>
    {% raw %}{{ field }}{% endraw %}
    {% raw %}{% for error in field.errors %}{% endraw %}
      <span class="help-block">{% raw %}{{ error }}{% endraw %}</span>
    {% raw %}{% endfor %}{% endraw %}
  </div>
{% raw %}{% endfor %}{% endraw %}
{% endhighlight %}

At this point we already added several Bootstrap elements, but our form still looks broken:

![Bootstrap Form]({{ "/media/2015-12-04-package-of-the-week-django-widget-tweaks/broken-form-2.png" | prepend: site.baseurl }} "Bootstrap Form")

Now to put Django Widget Tweaks in action, add an extra attribute to the `field` element:

{% highlight html %}
{% raw %}{{ field|add_class:'form-control' }}{% endraw %}
{% endhighlight %}

![Bootstrap Form]({{ "/media/2015-12-04-package-of-the-week-django-widget-tweaks/bootstrap-form.png" | prepend: site.baseurl }} "Bootstrap Form")

The final result of our template is shown below:

{% highlight html %}
{% raw %}{% extends 'base.html' %}{% endraw %}

{% raw %}{% load widget_tweaks %}{% endraw %}

{% raw %}{% block content %}{% endraw %}
  <h2>Add person</h2>
  <form method="post">
    {% raw %}{% csrf_token %}{% endraw %}

    {% raw %}{% for hidden in form.hidden_fields %}{% endraw %}
      {% raw %}{{ hidden }}{% endraw %}
    {% raw %}{% endfor %}{% endraw %}

    {% raw %}{% for field in form.visible_fields %}{% endraw %}
      <div class="form-group">
        <label for="{% raw %}{{ field.id_for_label }}{% endraw %}">{% raw %}{{ field.label }}{% endraw %}</label>
        {% raw %}{{ field|add_class:'form-control' }}{% endraw %}
        {% raw %}{% for error in field.errors %}{% endraw %}
          <span class="help-block">{% raw %}{{ error }}{% endraw %}</span>
        {% raw %}{% endfor %}{% endraw %}
      </div>
    {% raw %}{% endfor %}{% endraw %}

    <div class="form-group">
      <button type="submit" class="btn btn-success">
        <span class="glyphicon glyphicon-ok"></span> Save
      </button>
      <a href="{% raw %}{% url 'home' %}" class="btn btn-default">Cancel</a>{% endraw %}
    </div>
  </form>
{% raw %}{% endblock %}{% endraw %}
{% endhighlight %}

Another way to render the fields is using the `render_field` template tag, which gives you a flexible way to render Django fields using a HTML-like syntax:

{% highlight html %}
{% raw %}{% render_field form.first_name class="form-control" %}{% endraw %}
{% endhighlight %}

You can also use the template variables as attribute values:

{% highlight html %}
{% raw %}{% render_field form.first_name class="form-control" placeholder=form.first_name.label %}{% endraw %}
{% endhighlight %}

***

Personally I find this package really useful, because it let you customize your form elements in a non intrusive way, without having to add extra css class inside the form definition. Also it's more clear this way, because afterall the css classes are related to the page layout.

Again, there's a lot more you can do with it, you can learn more by reading its [documentation][django-widget-tweaks]{:target="_blank"}. Also, the project I created to ilustrate this article can be found on GitHub [sibtc/simple-django-widget-tweaks][simple-django-widget-tweaks]{:target="_blank"}.

[django-forms]: https://docs.djangoproject.com/en/1.9/topics/forms/
[django-widget-tweaks]: https://pypi.python.org/pypi/django-widget-tweaks
[bootstrap]: http://getbootstrap.com/
[simple-django-widget-tweaks]: https://github.com/sibtc/simple-django-widget-tweaks
